{"version":3,"sources":["axios/feeds.js","utils/summarizer.js","App.js","index.js"],"names":["LANGSERVER_URL","getFeed","a","axios","get","res","data","postText","text","post","require","Language","NormalizerFi","StemmerFi","TokenizerFi","stripHtml","html","divElement","document","createElement","innerHTML","textContent","innerText","App","useState","feedItems","setfeedItems","useEffect","response","result","items","map","item","show","summarize","summary","fetchFeed","showFullText","id","modifiedfeedItems","guid","postTextFromFeed","targetText","find","content","console","log","className","Button","variant","size","onClick","pubDate","title","dangerouslySetInnerHTML","__html","ReactDOM","render","StrictMode","getElementById"],"mappings":"oRAKMA,EAAiB,4BAEVC,EAAO,uCAAG,4BAAAC,EAAA,sEACDC,IAAMC,IAAN,UANL,iDAMK,OALN,mEAIO,cACbC,EADa,yBAEZA,EAAIC,MAFQ,2CAAH,qDAUPC,EAAQ,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACFC,IAAMM,KAAN,UAAcT,EAAd,cAA0C,CAAEM,KAAME,IADhD,cACdH,EADc,yBAEbA,GAFa,2CAAH,sDChBrB,GADqBK,EAAQ,IAArBC,SACyCD,EAAQ,KAAjDE,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,UAAWC,EAAjC,EAAiCA,YAiCpBC,GA/BM,IAAIH,EACL,IAAIE,EACN,IAAID,EA6BK,SAACG,GACtB,IAAIC,EAAaC,SAASC,cAAc,OAExC,OADAF,EAAWG,UAAYJ,EAChBC,EAAWI,aAAeJ,EAAWK,WAAa,K,uBC6C9CC,EA3EH,WAEV,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WAAM,4CACd,8BAAAzB,EAAA,sEACyBD,IADzB,OACQ2B,EADR,OAEQC,EAASD,EAASE,MAAMC,KAAI,SAAAC,GAAI,kCAAUA,GAAV,IAAgBC,MAAM,EAAOC,WAAW,EAAOC,QAAS,QAC9FT,EAAaG,GAHf,4CADc,uBAAC,WAAD,wBAMdO,KACC,IAEH,IAAMC,EAAe,SAACC,GACpB,IAAMC,EAAoBd,EAAUM,KAAI,SAAAC,GAAI,OAC1CA,EAAKQ,OAASF,IAAoB,IAAdN,EAAKC,KAAzB,2BAA+CD,GAA/C,IAAqDC,MAAM,IAA3D,2BAAyED,GAAzE,IAA+EC,MAAM,EAAOC,WAAW,OAEzGR,EAAaa,IAoBTE,EAAgB,uCAAG,WAAOH,GAAP,mBAAApC,EAAA,6DACjBwC,EAAajB,EAAUkB,MAAK,SAAAX,GAAI,OAAIA,EAAKQ,OAASF,KAClD9B,EAAOO,EAAU2B,EAAWE,SAFX,SAGLrC,EAASC,GAHJ,OAGjBH,EAHiB,OAIvBwC,QAAQC,IAAIzC,GAJW,2CAAH,sDAOtB,OACE,sBAAK0C,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,uDAIF,qBAAKA,UAAU,WAAf,SACGtB,GAAaA,EAAUM,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KACtC,sBAAKc,UAAU,eAAf,UACC,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKH,UAAU,OAAOI,QAAS,kBAAMd,EAAaL,EAAKQ,OAAtF,qBAEA,cAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKH,UAAU,OAAOI,QAAO,sBAAE,sBAAAjD,EAAA,sEAAkBuC,EAAiBT,EAAKQ,MAAxC,mFAA9D,yBAEA,uBACA,uBACA,4BAAIR,EAAKoB,UACT,uBACCpB,EAAKqB,MACLrB,EAAKE,WAAa,mBAAGa,UAAU,WAAWO,wBAAyB,CAAEC,OAAQvB,EAAKG,YACjFH,EAAKE,WAAa,mBAAGa,UAAU,WAAWO,wBAAyB,CAAEC,OAAQvB,EAAKY,aAXlDZ,EAAKQ,MAcxC,oBAAGO,UAAU,WAAb,UAAwC,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKH,UAAU,OAAOI,QAAS,kBAAMd,EAAaL,EAAKQ,OAAtF,yBACxBR,EAAKqB,QADQrB,EAAKQ,eCrE7CgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,W","file":"static/js/main.83c7bee7.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst CORS_URL = 'https://api.rss2json.com/v1/api.json?rss_url='\r\nconst RSS_URL = 'https://feeds.yle.fi/uutiset/v1/majorHeadlines/YLE_UUTISET.rss'\r\n\r\nconst LANGSERVER_URL = 'http://localhost:5000/api'\r\n\r\nexport const getFeed = async () => {\r\n    const res = await axios.get(`${CORS_URL}${RSS_URL}`)\r\n    return res.data\r\n}\r\n\r\nexport const getStem = async (word) => {\r\n    const res = await axios.post(`${LANGSERVER_URL}/stem`, { data: word })\r\n    return res\r\n}\r\n\r\nexport const postText = async (text) => {\r\n    const res = await axios.post(`${LANGSERVER_URL}/post_text`, { data: text })\r\n    return res\r\n}\r\n","const { Language } = require('@nlpjs/language')\r\nconst { NormalizerFi, StemmerFi, TokenizerFi } = require('@nlpjs/lang-fi')\r\n\r\nconst normalizer = new NormalizerFi()\r\nconst tokenizer = new TokenizerFi()\r\nconst stemmer = new StemmerFi()\r\n\r\nexport const normalizeFinnish = (text) => {\r\n    return normalizer.normalize(text)\r\n}\r\n\r\nexport const stemFinnish = (tokenArray) => {\r\n    return stemmer.stem(tokenArray)\r\n}\r\n\r\nexport const stemWord = (word) => {\r\n    return stemmer.stemWord(word)\r\n}\r\n\r\nexport const tokenizeFinnish = (text) => {\r\n    return tokenizer.tokenize(text)\r\n}\r\n\r\nexport const guessLanguage = (text) => {\r\n    const language = new Language()\r\n    const allowList = ['en', 'fi']\r\n    const guess = language.guess(text, allowList)\r\n    return JSON.stringify(guess[0].language)\r\n}\r\n\r\nexport const splitSentences = (text) => {\r\n    return text.match(/[^\\.!\\?]+[\\.!\\?]+/g)\r\n}\r\n\r\nexport const stripHtml = (html) => {\r\n    var divElement = document.createElement(\"div\");\r\n    divElement.innerHTML = html;\r\n    return divElement.textContent || divElement.innerText || \"\";\r\n}","import { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport { getFeed, getStem, postText } from './axios/feeds'\r\nimport { guessLanguage, stripHtml, tokenizeFinnish, splitSentences, stemFinnish, stemWord, normalizeFinnish } from './utils/summarizer'\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst App = () => {\r\n\r\n  const [feedItems, setfeedItems] = useState([])\r\n\r\n  useEffect(() => {\r\n    async function fetchFeed() {\r\n      const response = await getFeed()\r\n      const result = response.items.map(item => ({ ...item, show: false, summarize: false, summary: \"\" }))\r\n      setfeedItems(result)\r\n    }\r\n    fetchFeed()\r\n  }, [])\r\n\r\n  const showFullText = (id) => {\r\n    const modifiedfeedItems = feedItems.map(item => (\r\n      item.guid === id && item.show === false ? { ...item, show: true } : { ...item, show: false, summarize: false }\r\n    ))\r\n    setfeedItems(modifiedfeedItems)\r\n  }\r\n\r\n  const summarize = (id) => {\r\n    const targetText = feedItems.find(item => item.guid === id)\r\n    const summary = stripHtml(targetText.content)\r\n    const modifiedfeedItems = feedItems.map(item => (\r\n      item.guid === id && item.show === true ?\r\n        { ...item, show: true, summarize: true, summary: summary }\r\n        :\r\n        { ...item, show: false, summarize: false }\r\n    ))\r\n    setfeedItems(modifiedfeedItems)\r\n  }\r\n\r\n  const stemTest = async (word) => {\r\n    const stemmed = await getStem(word)\r\n    console.log(stemmed.data)\r\n  }\r\n\r\n  const postTextFromFeed = async (id) => {\r\n    const targetText = feedItems.find(item => item.guid === id)\r\n    const text = stripHtml(targetText.content)\r\n    const res = await postText(text)\r\n    console.log(res)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Ylen pääutiset\r\n        </p>\r\n      </header>\r\n      <div className=\"App-body\">\r\n        {feedItems && feedItems.map(item => item.show ?\r\n          (<div className=\"feedItemShow\" key={item.guid}>\r\n            <Button variant=\"primary\" size=\"sm\" className=\"mr-2\" onClick={() => showFullText(item.guid)}>\r\n              Piilota</Button>\r\n            <Button variant=\"success\" size=\"sm\" className=\"mr-2\" onClick={async () => await postTextFromFeed(item.guid)}>\r\n              Tiivistä</Button>\r\n            <br />\r\n            <br />\r\n            <i>{item.pubDate}</i>\r\n            <br />\r\n            {item.title}\r\n            {item.summarize && <p className=\"fullText\" dangerouslySetInnerHTML={{ __html: item.summary }}></p>}\r\n            {!item.summarize && <p className=\"fullText\" dangerouslySetInnerHTML={{ __html: item.content }}></p>}\r\n          </div>)\r\n          :\r\n          (<p className=\"feedItem\" key={item.guid}><Button variant=\"primary\" size=\"sm\" className=\"mr-2\" onClick={() => showFullText(item.guid)}>\r\n            Näytä</Button>{item.title}</p>)\r\n        )}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n"],"sourceRoot":""}